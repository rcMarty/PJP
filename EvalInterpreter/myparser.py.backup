# make calculator which supports +, -, *, /, (, ) and only positive numbers WITHOUT using eval() function

# 1. Tokenize the input string
# 2. Parse the tokens to create an abstract syntax tree (AST)
# 3. Evaluate the AST

# Tokenize the input string
# 1. Create a list of tokens
# 2. Iterate through the input string
# 3. If the character is a digit, keep adding it to the current number
# 4. If the character is an operator, add the current number to the list of tokens and add the operator as a token


# Parse the tokens to create an abstract syntax tree (AST)
# 1. Create a class for each type of node in the AST
# 2. Create a recursive descent parser to parse the tokens and create the AST
# 3. The parser should follow the operator precedence and associativity rules


# Evaluate the AST
# 1. Create a recursive function to evaluate the AST
# 2. The function should take a node as input and return the value of the node
# 3. The function should recursively evaluate the children of the node and apply the operator to the values
