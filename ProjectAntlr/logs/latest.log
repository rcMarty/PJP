2024-04-06 18:10:49 | INFO | org.parser.Main : Start parsing
2024-04-06 18:10:49 | INFO | org.parser.Main : End parsing (prog (stat (declareStat (literals int) aa) ;) (stat (ifStat if ( (condition (expr true)) ) (stat (writeStat write (expr aa)) ;))) <EOF>)
2024-04-06 18:10:49 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting boolean: true
2024-04-06 18:11:03 | INFO | org.parser.Main : Start parsing
2024-04-06 18:11:03 | INFO | org.parser.Main : End parsing (prog (stat (declareStat (literals int) aa) ;) (stat (ifStat if ( (condition (expr "hehe")) ) (stat (writeStat write (expr aa)) ;))) <EOF>)
2024-04-06 18:11:03 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "hehe"
2024-04-06 18:11:03 | ERROR | org.parser.Main : 
					 [35m[CONDITION ERROR][0m
					 --------------------------
					 | error at line 2:3! Condition must be a boolean
|  - Statement: if("hehe") write aa;
|                  ^

2024-04-06 18:16:25 | INFO | org.parser.Main : Start parsing
2024-04-06 18:16:25 | INFO | org.parser.Main : End parsing (prog (stat (declareStat (literals int) aa) ;) (stat (ifStat if ( (condition (expr "hehe")) ) (stat (writeStat write (expr aa)) ;))) <EOF>)
2024-04-06 18:16:25 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "hehe"
2024-04-06 18:16:25 | ERROR | org.parser.Main : 
					 [35m[CONDITION ERROR][0m
					 --------------------------
					 | error at line 2:3! Condition must be a boolean
					 |  - Statement: if("hehe") write aa;
					 |                  ^
					 
2024-04-06 18:20:10 | INFO | org.parser.Main : Start parsing
2024-04-06 18:20:10 | INFO | org.parser.Main : End parsing (prog (stat (declareStat (literals int) aa) ;) (stat (ifStat if ( (condition (expr "hehe")) ) (stat (writeStat write (expr aa)) ;))) <EOF>)
2024-04-06 18:20:10 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "hehe"
2024-04-06 18:20:10 | ERROR | org.parser.Main : 
					 [35m[CONDITION ERROR][0m
					 --------------------------
					 error at line 2:3! Condition must be a boolean
					  - Statement: if("hehe") write aa;
					                  ^
					 
2024-04-06 18:21:53 | INFO | org.parser.Main : Start parsing
2024-04-06 18:21:53 | INFO | org.parser.Main : End parsing (prog (stat (declareStat (literals int) aa) ;) (stat (ifStat if ( (condition (expr "hehe")) ) (stat (writeStat write (expr aa)) ;))) <EOF>)
2024-04-06 18:21:53 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "hehe"
2024-04-06 18:21:53 | ERROR | org.parser.Main : 
					 --------------------------
					 [35m[CONDITION ERROR][0m
					 error at line 2:3! Condition must be a boolean
					  - Statement: if("hehe") write aa;
					                  ^
					 
2024-04-06 18:22:19 | INFO | org.parser.Main : Start parsing
2024-04-06 18:22:19 | INFO | org.parser.Main : End parsing (prog (stat (declareStat (literals int) aa) ;) (stat (ifStat if ( (condition (expr "hehe")) ) (stat (writeStat write (expr aa)) ;))) <EOF>)
2024-04-06 18:22:19 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "hehe"
2024-04-06 18:22:19 | ERROR | org.parser.Main : 
					 --------------------------
					 [35m[CONDITION ERROR][0m
					 error at line 2:3 -> Condition must be a boolean
					  - Statement: if("hehe") write aa;
					                  ^
					 
2024-04-06 18:22:41 | INFO | org.parser.Main : Start parsing
2024-04-06 18:22:41 | INFO | org.parser.Main : End parsing (prog (stat (declareStat (literals int) aa) ;) (stat (ifStat if ( (condition (expr "hehe")) ) (stat (writeStat write (expr aa)) ;))) <EOF>)
2024-04-06 18:22:41 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "hehe"
2024-04-06 18:22:41 | ERROR | org.parser.Main : 
					 --------------------------
					 [35m[CONDITION ERROR][0m
					 error at line 2:3 -> Condition must be a boolean
					  - statement: if("hehe") write aa;
					                  ^
					 
2024-04-06 18:23:19 | INFO | org.parser.Main : Start parsing
2024-04-06 18:23:19 | INFO | org.parser.Main : End parsing (prog (stat (declareStat (literals int) aa) ;) (stat (ifStat if ( (condition (expr "hehe")) ) (stat (writeStat write (expr aa)) ;))) (stat (whileStat while ( (condition (expr aa = (expr 1))) ) (stat (writeStat write (expr aa)) ;))) <EOF>)
2024-04-06 18:23:19 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "hehe"
2024-04-06 18:23:19 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting integer: 1
2024-04-06 18:23:19 | ERROR | org.parser.Main : 
					 --------------------------
					 [35m[CONDITION ERROR][0m
					 error at line 2:3 -> Condition must be a boolean
					  - statement: if("hehe") write aa;
					                  ^
					 
2024-04-06 18:23:19 | ERROR | org.parser.Main : 
					 --------------------------
					 [35m[CONDITION ERROR][0m
					 error at line 3:6 -> Condition must be a boolean
					  - statement: while(aa=1) write aa;
					                     ^
					 
2024-04-06 18:23:46 | INFO | org.parser.Main : Start parsing
2024-04-06 18:23:46 | INFO | org.parser.Main : End parsing (prog (stat (declareStat (literals int) aa) ;) (stat (ifStat if ( (condition (expr "hehe")) ) (stat (writeStat write (expr aa)) ;))) (stat (whileStat while ( (condition (expr aa = (expr 1))) ) (stat (writeStat write (expr aa)) ;))) <EOF>)
2024-04-06 18:23:46 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "hehe"
2024-04-06 18:23:47 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting integer: 1
2024-04-06 18:23:47 | ERROR | org.parser.Main : 
					 [35m[CONDITION ERROR][0m
					 error at line 2:3 -> Condition must be a boolean
					  - statement: if("hehe") write aa;
					                  ^
					 
2024-04-06 18:23:47 | ERROR | org.parser.Main : 
					 [35m[CONDITION ERROR][0m
					 error at line 3:6 -> Condition must be a boolean
					  - statement: while(aa=1) write aa;
					                     ^
					 
2024-04-06 18:32:12 | INFO | org.parser.Main : Start parsing
2024-04-06 18:32:12 | INFO | org.parser.Main : End parsing (prog (stat (writeStat write (expr "<Testing errors>")) ;) (stat (writeStat write (expr "4) mod used with float")) ;) (stat (writeStat write (expr "20 mod 3.0: ") , (expr (expr 20) % (expr 3.0))) ;) (stat (writeStat write (expr "8) assignment of float to int")) ;) (stat (declareStat (literals int) x) ;) (stat (expr x = (expr 13.25)) ;) (stat (writeStat write (expr "x=13.25: ") , (expr x)) ;) (stat (writeStat write (expr "12) . only for strings")) ;) (stat (writeStat write (expr "abc+10: ") , (expr (expr "abc") . (expr 10))) ;) (stat (writeStat write (expr "15) multiple declarations")) ;) (stat (declareStat (literals float) x) ;) (stat (writeStat write (expr "18) missing declaration")) ;) (stat (expr y = (expr 10)) ;) (stat (writeStat write (expr "21) + wont work with strings")) ;) (stat (writeStat write (expr "x+y") , (expr (expr "x") + (expr "y"))) ;) <EOF>)
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "<Testing errors>"
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "4) mod used with float"
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "20 mod 3.0: "
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting integer: 20
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting float: 3.0
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "8) assignment of float to int"
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting float: 13.25
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "x=13.25: "
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "12) . only for strings"
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "abc+10: "
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "abc"
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting integer: 10
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "15) multiple declarations"
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "18) missing declaration"
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "21) + wont work with strings"
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "x+y"
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "x"
2024-04-06 18:32:12 | TRACE | o.p.typecheck.TypeCheckVisitor : Visiting string: "y"
2024-04-06 18:32:12 | ERROR | org.parser.Main : 
					 [34m[ASSIGN ERROR][0m
					 error at line 8:0 -> Cannot assign FLOAT to INT
					  - statement: x = 13.25;
					               ^
					 
2024-04-06 18:32:12 | ERROR | org.parser.Main : 
					 [34m[ASSIGN ERROR][0m
					 error at line 15:6 -> Variable x already declared
					  - statement: float x;
					                     ^
					 
2024-04-06 18:32:12 | ERROR | org.parser.Main : 
					 [34m[ASSIGN ERROR][0m
					 error at line 18:0 -> Variable y not declared
					  - statement: y = 10;
					               ^
					 
2024-04-06 18:32:12 | ERROR | org.parser.Main : 
					 [36m[TYPE ERROR][0m
					 error at line 4:22 -> Modulo can only be applied to integers
					  - statement: write "20 mod 3.0: ", 20 % 3.0;
					                                     ^
					 
2024-04-06 18:32:12 | ERROR | org.parser.Main : 
					 [36m[TYPE ERROR][0m
					 error at line 12:18 -> Concatenation can only be applied to strings
					  - statement: write "abc+10: ", "abc". 10;
					                                 ^
					 
2024-04-06 18:32:12 | ERROR | org.parser.Main : 
					 [36m[TYPE ERROR][0m
					 error at line 21:13 -> Arithmetic operations can only be applied to integers and floats
					  - statement: write "x+y", "x"+"y";
					                            ^
					 
2024-04-06 18:54:05 | INFO | org.parser.Main : Start parsing
2024-04-06 18:54:05 | INFO | org.parser.Main : End parsing (prog (stat (writeStat write (expr "<Testing errors>")) ;) (stat (writeStat write (expr "4) mod used with float")) ;) (stat (writeStat write (expr "20 mod 3.0: ") , (expr (expr 20) % (expr 3.0))) ;) (stat (writeStat write (expr "8) assignment of float to int")) ;) (stat (declareStat (literals int) x) ;) (stat (expr x = (expr 13.25)) ;) (stat (writeStat write (expr "x=13.25: ") , (expr x)) ;) (stat (writeStat write (expr "12) . only for strings")) ;) (stat (writeStat write (expr "abc+10: ") , (expr (expr "abc") . (expr 10))) ;) (stat (writeStat write (expr "15) multiple declarations")) ;) (stat (declareStat (literals float) x) ;) (stat (writeStat write (expr "18) missing declaration")) ;) (stat (expr y = (expr 10)) ;) (stat (writeStat write (expr "21) + wont work with strings")) ;) (stat (writeStat write (expr "x+y") , (expr (expr "x") + (expr "y"))) ;) <EOF>)
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	operation [33mmodulo[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :           Visiting 	literal [33mInteger[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :           Visiting 	literal [33mFloat[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :       Visiting 	         [33mdeclaration[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :       Visiting 	      [33massigment[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mFloat[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	     [33midentifier[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	operation [33mconcatenation[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :           Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :           Visiting 	literal [33mInteger[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :       Visiting 	         [33mdeclaration[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :       Visiting 	      [33massigment[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :         Visiting 	operation [33m+[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :           Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | TRACE | o.p.typecheck.TypeCheckVisitor :           Visiting 	literal [33mString[0m
2024-04-06 18:54:05 | ERROR | org.parser.Main : 
					 [34m[ASSIGN ERROR][0m
					 error at line 8:0 -> Cannot assign FLOAT to INT
					  - statement: x = 13.25;
					               ^
					 
2024-04-06 18:54:05 | ERROR | org.parser.Main : 
					 [34m[ASSIGN ERROR][0m
					 error at line 15:6 -> Variable x already declared
					  - statement: float x;
					                     ^
					 
2024-04-06 18:54:05 | ERROR | org.parser.Main : 
					 [34m[ASSIGN ERROR][0m
					 error at line 18:0 -> Variable y not declared
					  - statement: y = 10;
					               ^
					 
2024-04-06 18:54:05 | ERROR | org.parser.Main : 
					 [36m[TYPE ERROR][0m
					 error at line 4:22 -> Modulo can only be applied to integers
					  - statement: write "20 mod 3.0: ", 20 % 3.0;
					                                     ^
					 
2024-04-06 18:54:05 | ERROR | org.parser.Main : 
					 [36m[TYPE ERROR][0m
					 error at line 12:18 -> Concatenation can only be applied to strings
					  - statement: write "abc+10: ", "abc". 10;
					                                 ^
					 
2024-04-06 18:54:05 | ERROR | org.parser.Main : 
					 [36m[TYPE ERROR][0m
					 error at line 21:13 -> Arithmetic operations can only be applied to integers and floats
					  - statement: write "x+y", "x"+"y";
					                            ^
					 
2024-04-06 18:55:07 | INFO | org.parser.Main : Start parsing
2024-04-06 18:55:07 | INFO | org.parser.Main : End parsing (prog (stat (writeStat write (expr "<Testing errors>")) ;) (stat (writeStat write (expr "4) mod used with float")) ;) (stat (writeStat write (expr "20 mod 3.0: ") , (expr (expr 20) % (expr 3.0))) ;) (stat (writeStat write (expr "8) assignment of float to int")) ;) (stat (declareStat (literals int) x) ;) (stat (expr x = (expr 13.25)) ;) (stat (writeStat write (expr "x=13.25: ") , (expr x)) ;) (stat (writeStat write (expr "12) . only for strings")) ;) (stat (writeStat write (expr "abc+10: ") , (expr (expr "abc") . (expr 10))) ;) (stat (writeStat write (expr "15) multiple declarations")) ;) (stat (declareStat (literals float) x) ;) (stat (writeStat write (expr "18) missing declaration")) ;) (stat (expr y = (expr 10)) ;) (stat (writeStat write (expr "21) + wont work with strings")) ;) (stat (writeStat write (expr "x+y") , (expr (expr "x") + (expr "y"))) ;) <EOF>)
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	operation [33mmodulo[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                     Visiting 	literal [33mInteger[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                     Visiting 	literal [33mFloat[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :             Visiting 	         [33mdeclaration[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :             Visiting 	      [33massigment[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mFloat[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	     [33midentifier[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	operation [33mconcatenation[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                     Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                     Visiting 	literal [33mInteger[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :             Visiting 	         [33mdeclaration[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :             Visiting 	      [33massigment[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                 Visiting 	operation [33m+[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                     Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | TRACE | o.p.typecheck.TypeCheckVisitor :                     Visiting 	literal [33mString[0m
2024-04-06 18:55:07 | ERROR | org.parser.Main : 
					 [34m[ASSIGN ERROR][0m
					 error at line 8:0 -> Cannot assign FLOAT to INT
					  - statement: x = 13.25;
					               ^
					 
2024-04-06 18:55:07 | ERROR | org.parser.Main : 
					 [34m[ASSIGN ERROR][0m
					 error at line 15:6 -> Variable x already declared
					  - statement: float x;
					                     ^
					 
2024-04-06 18:55:07 | ERROR | org.parser.Main : 
					 [34m[ASSIGN ERROR][0m
					 error at line 18:0 -> Variable y not declared
					  - statement: y = 10;
					               ^
					 
2024-04-06 18:55:07 | ERROR | org.parser.Main : 
					 [36m[TYPE ERROR][0m
					 error at line 4:22 -> Modulo can only be applied to integers
					  - statement: write "20 mod 3.0: ", 20 % 3.0;
					                                     ^
					 
2024-04-06 18:55:07 | ERROR | org.parser.Main : 
					 [36m[TYPE ERROR][0m
					 error at line 12:18 -> Concatenation can only be applied to strings
					  - statement: write "abc+10: ", "abc". 10;
					                                 ^
					 
2024-04-06 18:55:07 | ERROR | org.parser.Main : 
					 [36m[TYPE ERROR][0m
					 error at line 21:13 -> Arithmetic operations can only be applied to integers and floats
					  - statement: write "x+y", "x"+"y";
					                            ^
					 
